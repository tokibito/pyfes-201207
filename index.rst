Python Hack-a-thon 2010.11 ハンズオン 初級
==========================================

.. contents::
   :depth: 2

講師
====

* `@tokibito`_ 他

.. _`@tokibito`: http://twitter.com/tokibito

この資料について
================

この資料は、Python Hack-a-thon 2010.11のPythonハンズオン初級向けの資料です。

読み方や注意点など
------------------

* 参考資料として読んでください
  この資料に沿ってやらないといけないってことはないです。ご自由にどうぞ。
* 不明点は質問するなどしてください
* 資料に間違いがある可能性もあるので、注意してください
  うまく動かない！って時は遠慮なく講師の人に質問してください

その他参考資料
==============

Python ドキュメントにはたくさんの情報があります。読みましょう。

* `Python ドキュメント`_

前回のPython Hack-a-thonのハンズオン(講師: `@aodag`_ さん)で使用された資料です。

* `Python Hack-a-thon 2010.7`_

.. _`Python ドキュメント`: http://www.python.jp/doc/release/
.. _`Python Hack-a-thon 2010.7`: http://dl.dropbox.com/u/283261/hack-a-thon-201007/docs/html/index.html
.. _`@aodag`: http://twitter.com/aodag

Pythonのインストール
====================

インストールについてはGoogleで検索すればこと足りると思うので、あまり詳しい説明はここではしません。

:入手先: http://www.python.org/download/

Windowsの場合
-------------

1. インストーラを使用してインストールします
2. 環境変数のPathにPythonをインストールしたディレクトリとScriptsディレクトリを追加してください

  XPの場合、[マイコンピュータ]のプロパティの[詳細設定]タブの[環境変数]から設定できます。

MacOSXの場合
------------

OSX10.5以上であれば、Pythonがインストールされています。

それ以前のバージョン、または最新版を利用する場合は、MacPortsでインストールしたりMacPythonをダウンロードしてインストールしてください。

Ubuntuの場合
------------

最初からPythonがインストールされています。

Hello, world!
=============

ターミナル(コマンドプロンプト)を起動して、``python`` と入力して実行してみましょう。
Pythonが対話モードで起動します。

``>>>`` という文字列が表示されれば、Pythonがプログラムを実行できる状態になっています。

``Hello, world!`` という文字列を画面に出力する命令を入力して実行してみます。

.. code-block:: pycon

  $ python
  >>> print "Hello, world!"
  Hello, world!

表示されましたか？

データ型
========

整数
----

文字列
------

リスト
------

辞書
----

タプル
------

真偽値
------

空の値
------

演算子
======

変数
====

関数
====

インデント
==========

Pythonではインデントは、文法として意味があります。関数や制御構造などで複数の命令のまとまりの範囲を示すために使います。

.. note::

   ソースファイル中のインデントに問題がある場合、IndentationErrorとなりプログラムは動作しません。

制御構造
========

条件分岐
--------

.. code-block:: pycon

  >>> a = 10
  >>> if a == 10:
  ...     print 'a is 10.'
  ... elif a > 20:
  ...     print 'a is bigger than 20.'
  ... else:
  ...     print 'other condition.'
  ...
  a is 10.

繰り返し(1)
-----------

.. code-block:: pycon

  >>> range(5)
  [0, 1, 2, 3, 4]
  >>> for i in range(5):
  ...     print i
  ...
  0
  1
  2
  3
  4

繰り返し(2)
-----------

.. code-block:: pycon

  >>> a = 5
  >>> while a > 0:
  ...     print a
  ...     a -= 1
  ...
  5
  4
  3
  2
  1

ソースコードの再利用とモジュール
================================

Pythonではソースコードをファイルに入力して、読み込ませて実行させることができます。

ソースコードのファイル名は英数と ``-`` (ハイフン)、 ``_`` (アンダースコア)を使用できます。2バイト文字(日本語)などは使えません。

.. note::

  ファイルをモジュールとして扱う場合、ハイフンはソースコード中ではマイナスとして解釈されてしまうため、モジュール名にはハイフンは使わないほうがよいです。

コメント
--------

ソースコード中に ``# コメント`` のように書くと、``#``から行末までの文字列はコメントとして扱われます。

日本語の扱い
============

Pythonでは日本語の文字列も扱えます。

文字コード
----------

1バイト単位でデータを扱うコンピュータの場合、英数だけなら1バイトですべての文字を表せます。しかし、日本語などの文字の種類が多い言語を扱う場合はそれでは足りません。
日本語は何バイトかのデータ列で文字を表現します。表現の種類は歴史的な事情もあって、いくつも存在します。
最近はUTF-8という文字コードで扱えば大抵問題はないので、この名前を覚えておけばよいでしょう。

.. note::

   Windowsを使用している場合は、CP932(ShiftJIS)という文字コードも扱うことになるので注意してください

Wikipediaなどで文字コードについて詳しく載っているので、興味のある方は調べてみてください。

* `文字コード - Wikipedia`_

.. _`文字コード - Wikipedia`: http://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89

ユニコード(Unicode)
-------------------

文字コードの一種です。Python2.Xでは、文字列はasciiのバイト列かUnicodeで文字列で文字列を扱います。
大きな違いは文字の長さと1文字あたりのと使用バイト数の扱いです。

asciiバイト列では、1文字は1～3バイト程度で表現します。(文字コードによって使用するバイト数や文字表現が変わります)

.. code-block:: python
   :linenos:

   # coding: utf-8
   a = '日本語'
   print a
   print len(a)
   print repr(a) # aの内部表現

Unicode文字列では1文字は2バイトで表現します。(例外もあります)

.. code-block:: python
   :linenos:

   # coding: utf-8
   a = u'日本語'
   print a
   print len(a)
   print repr(a) # aの内部表現

ターミナルの対話モードで入力する場合と、ソースファイル内での扱いが異なることに注意してください。

.. note::

   対話モードでの日本語入力は、はまりやすいポイントなので、慣れるまでは避けておくのが無難かもしれません。

クラス
======

ファイルの入出力
================

サードパーティのモジュール
==========================

Python Package Index (PyPI)
---------------------------

さまざまなサードパーティのモジュールが登録されているページです。

* http://pypi.python.org/pypi

setuptools
----------

Pythonのサードパーティモジュールをインストールするためのツールの一種です。インストールしておくと ``easy_intall`` コマンドが使えます。
 ``easy_install`` コマンドを使うと、PyPIで公開されているモジュールを簡単にインストールすることができます。

* http://pypi.python.org/pypi/setuptools

課題
====

課題は順番にこなす必要はありません。面白そうだと思った課題にチャレンジしてみてください。

* TwitterのRSSフィードを取得してみる
* socketモジュールを使ってネットワーク通信

Indices and tables
==================

* :ref:`genindex`
* :ref:`search`


